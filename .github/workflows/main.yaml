name: CI-CD

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  CI:
    # Continuous Integration job
    name: Continuous Integration
    runs-on: ubuntu-latest
    env:
      # Environment variables for CI jobs
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      ARM_ACCESS_KEY: ${{ secrets.ARM_ACCESS_KEY }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
      - name: Terraform Init
        run: terraform init
      - name: Terraform plan
        run: |
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > key-pair.pub
          terraform plan -input=false -var "ARM_CLIENT_SECRET=${{ env.ARM_CLIENT_SECRET }}"

  tfsec:
    # Tfsec - Security Scan job
    name: Tfsec - Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Tfsec
        uses: aquasecurity/tfsec-action@v1.0.0
        with:
          soft_fail: true

  CD:
    # Continuous Deployment job
    name: Continuous Deployment
    needs: [tfsec, CI]
    runs-on: ubuntu-latest
    if: ${{ needs.tfsec.result == 'success' }}
    env:
      # Environment variables for CD jobs
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      ARM_ACCESS_KEY: ${{ secrets.ARM_ACCESS_KEY }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
      - name: Terraform Init
        run: terraform init
      - name: Terraform plan
        run: |
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > key-pair.pub
          terraform plan -input=false -var "ARM_CLIENT_SECRET=${{ env.ARM_CLIENT_SECRET }}"
      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve -var "ARM_CLIENT_SECRET=${{ env.ARM_CLIENT_SECRET }}"
  
  Deployment:
    name: Deployment
    needs: [CD]
    runs-on: ubuntu-latest
    env:
      # Environment variables for CD jobs
      ARM_ACR_USERNAME: ${{ secrets.ACR_USERNAME }}
      ARM_ACR_PASSWORD: ${{ secrets.ACR_PASSWORD }}
      

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
      - name: Install Azure CLI
        run: |
          curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
          az --version

      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Configure AKS
        run: az aks get-credentials --resource-group aks-resources --name aks-aks1

      - name: Build and Push Docker Image
        run: |
          docker build -t krooazurecontainerregistry.azurecr.io/my-image:latest .
          docker login krooazurecontainerregistry.azurecr.io -u ${{ secrets.ACR_USERNAME }} -p ${{ secrets.ACR_PASSWORD }}
          docker push krooazurecontainerregistry.azurecr.io/my-image:latest

      - name: Deploy Application to AKS
        run: kubectl apply -f ./src/app.yaml

